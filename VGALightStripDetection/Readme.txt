工作备忘：
1. check 程序支持的最低软硬件环境+Camera性能
2. 在确定置具和平台位置后，ROI区域可以考虑一个定值，以避免操作员误操作
3.. 在程序通过按ESC键退出时，不关机
4.. 捕捉程序异常， 部分USB口松动会导致相机抓不到图，程序闪退
5. 相机曝光设置为"自动"，显卡断电启动时，发出默认光，会干扰相机曝光设定，造成过曝问题
    将目前测试相机曝光设定为[-2, -3]，效果明显好转
    故正式线上相机要能设定此属性
6. 目前有两种阈值需要设定，一种是基于BGR的阈值设定，另一种是基于HSV的阈值设定。先通过BGR阈值将大部分像素点过滤，然后在对mask进行一次HSV阈值设定。
但目前就HSV设定的阈值范围来看，范围很大，几乎可以忽略HSV设定
  另外，目前在不同位置的平台，需要手动调节阈值范围，需要考虑更加灵活的方式，来自动调节
7. 模板匹配可以考虑进来，模板轮廓的制作，匹配的置信度 -- 此路不通


Version Log
[v2.0.0.1]
1. 基于帧差法的大框架下，frame - background 后的mask 通过自适应阈值来调整掩膜
2. 再对mask覆盖的区域轮廓进行逐个颜色校验


[v2.0.0.2]
0. 针对取图逻辑有概率出现连续抢到CPU时间片， 导致无法更新到最新照片问题， 将取图逻辑设置为直接从相机中拿图，跟拍摄线程不打架，这样看拍摄线程的意义有待商榷
1. 增加饱和度设置，通过将饱和度拉到最大128， 来提升获取到的颜色鲜艳度
2. 查不到PPID时， 生成一个GUID来替换，并将涉计到的路径buf长度提高到MAX_PATH
3. 优化选取ROI逻辑

[v2.0.0.3]
1. 接入Spdlog日志库
2. 解掉复测时无法保存绿色和红色的图片的bug

[v2.0.0.4]
1. 正式程序里只测1次，如果需要测试N次，用批处理进行调用
2. (g_Config.shutdownTime >= ePowerOff && g_main_thread_exit == eExit) 这里的退出逻辑需要调整，有点问题
    这部分现在调整为 只认 g_Config.shutdownTime 状态信息
3. PPID 传参给main - 暂时未接
4. 程序中添加ErrorCode，通过抛出异常来处理
5. 自动获取灯带整体轮廓区域
6. 开始测试后，键入 0 表示本次测试完不关机

[v2.0.0.5] - 2021.04.13
1. 從MCU中抓取LED燈數 --> 已接入
2. PPID，显卡料号通过bat抓取并以參數形式傳入，程式中不再抓取
3. I2C報異常時，aging.csv數據保存為Fail
4. spdlog 直接保存到目的文件夹中，不再分散保存
5. 启动AP即开启工作线程，直到相机初始化完成，工作线程才正式工作
6. 22颗灯的情况下，点亮22颗灯需要300ms - 350ms 左右， 点亮单颗灯平均15ms左右
7. 调整3c.ini配置档结构，删除无用部分
8. 自動抓取燈帶ROI 兼容TUF卡

[v2.0.0.6] - 2021.04.26
1.应Brack要求，设置命令行参数--lit-off，来进行手动随机灭灯。在此基础上将原有随机灭灯逻辑同该手动随机灭灯逻辑整合到AgingLog中
2.修正设置ConfigData::_rect 和ConfigData::_shutdownTime 会修改掉3c.ini配置文件的bug

[v2.0.0.7] - 2021.04.28
1.优先保证程序在退出前保存aging.csv
2.弃用使用opencv窗口来显示最终的PASS/FAIL, 专用控制台等待输入来卡住进程

[v2.0.0.8] - 2021.05.08
1.修正上个版本亮全灯后，灯未关闭问题
2.修正随机灭灯情况下，开关条件错误，是小于等于x%时进行随机灭灯
3.及时flush数据到log中，避免出现程序一开始跑被abort 时，log里什么也没有的问题
4.在逐灯校验结束后，通过获取锁来让主线程等待工作线程结束后在进行后续工作
5.调整部分log格式
6.屏蔽控制台关闭按钮
7.N卡获取PPID的方式改换成由nvflash来获取

[v2.0.0.9] - 2021.05.11
1.开启随机灭灯时，在识别灯带轮廓阶段就不再点亮指定index灯

[v2.0.0.10] - 2021.05.12
1.新增在程序执行执行完毕后将fail灯珠的index 展示出来
2.捕获出现camera usb不稳导致读到空帧异常

[v2.0.0.11] - 2021.05.19
1.添加version

[v2.0.0.13] - 2021.05.31
1.将随机灭灯模块从I2CWrap中移除，独立到RandomLitoff中
2.添加VENDER_EXTRA预处理开关, 用来切换NV API封装库
3.添加SAVE_ROI_FBMCR预处理开关，保存捕获的灯带轮廓image
4.修正因灯带格子距离较远而导致的轮廓裂隙


[v2.0.0.14] - 2021.06.08
1.兼容背面有灯珠的卡，放开MineField 区域，将寻找灯带轮廓联通阈值开出到配置中

[v2.0.0.15] - 2021.06.11
1. 在灯带轮廓查找阶段，既然最终拿到的轮廓Rect都是经过颜色校验过的，那么简单认为都是灯带特征，直接将颜色校验完的轮廓Rect合并成一个大轮廓；findFrameContours中的轮廓合并逻辑暂且不动；MineField部分暂且不动

[v2.0.0.16] - 2021.07.27
1. 用Red来抓取ROI;对每颗灯的轮廓最小面积做阈值限制

[v2.0.0.17] - 2021.08.06
1. 分机种进行配置，配置参数规则如下：
  PPIDROG-STRIX-RTX3090-O24G-GUNDAM-2I3S  =>> STRIX-GUNDAM
	PPIDTUF-RTX3070TI-8G-GAMING-2I3S  =>> TUF-GAMING
  若有机种找不到自己对应的配置时， 则需要更新3c.json配置文件
  "TUF-GAMING": //机种thermo类型
  {
        "Camera": // 相机相关配置模块
        {
            "Index": 0, // 打开连接的相机ID
            "Exposure": -4, // 设定相机曝光 Exposure∈[-13, 0]，之前设定为-7，后来因为太低，致使光线太暗，容易发生误判，所以提高到 -4；也不能太高，防止出现过曝问题
            "Saturation": 65, // 相机饱和度设定 Saturation∈[0， 128]，之前设定为 128，但发现会导致在低曝光下， 画面颜色偏蓝，容易导致蓝色发生误判
            "SkipFrame": 3, // 连续获取第几帧为使用画面； 谷客相机在848*480情况下才能有30帧的帧率， 且在多线程环境下， 亮灭灯后， 连续抓N帧来保证不会出现错帧问题
            "Width": 848, // 窗口宽度
            "Hight": 480  // 窗口高度， 对于好一点的相机， 可以实现抓取1080P的画面，然后通过高斯金字塔降采样来进行处理， 那样可以避免出现2003错误
        },
        "AgingSetting": // 测试相关配置
        {
            "StartColor": 0,  // BLUE= 0, GREEN= 1, RED= 2, WHITE= 3, AllColor= 4. StartColor, StopColor ∈ [0, 4)
            "StopColor": 3,
            "RandomShutDownLedNum": 0,  //随机灭灯设置，取值范围[0, 100); 取消随机灭灯置为0
            "ShutDownDelayTime": -1,  //测试完毕后， 定时关机，单位秒， -1 表示不关机, -2 表示执行完后重启
            "RecheckFaileLedTime": 0  //侦测到某颗灯Faile 后, 再进行N次测试，看是否真的是Faile了; 这里需要注意的是随机灭灯时， 我认为‘随机灭掉的灯’即为故障灯，所以在此复测时， 是不会点亮的
        },
        "AlgorithmThreshold": 
        {
            "IntervalTime": 100,  // 亮灭灯指令和抓取图像之间的间隔时间
            "MinROIContoursArea": 100,  //在抓取灯带ROI阶段， 会抓到一些列的轮廓集合M， 然后将M中的集合合并成一个大轮廓即为灯带；这个M中面积小于MinROIContoursArea的就不参与合并了
            "MinContoursArea": 100, //在抓取单颗灯珠ROI阶段，轮廓集合M中， 面积小于MinContoursArea的， 一律舍弃
            "MinContoursSpace": 50, //在合并单颗灯珠轮廓集合M时， 轮廓与轮廓之间的距离大于MinContoursSpace 的，视为两个独立的轮廓，不进行合并，这样就有可能出现一颗灯， 两个轮廓的现象
            "LedContoursArea": 300, //对合并好的轮廓面积进行界定，小于LedContoursArea即认定fail；因为遮挡或反光或其他原因，会影响最后的结果，这样来试图卡下来
            "AdaptiveThresholdArgBlockSize": 101, // 自适应阈值算法参数1
            "AdaptiveThresholdArgC": -9,  //自适应阈值蒜贩参数2
            "ColorThres": [ 50, 50, 50, 50 ], // bgrw 四色最低阈值，用于颜色校验
            "ColorPercentage": [ 0.45, 0.45, 0.45, 0.45 ] //bgrw 四色占比, 用于颜色校验
        }
  }
  
2. ROG-STRIX-RTX3080-O10G-WHITE-2I3S 这类白色机种，谷客相机曝光需要设定到-6左右，高一点的话抓到的颜色很容易过曝

3. 在获取灯带ROI时，第一版采用亮一次BLUE，因外部影响(相机饱和度128， 会让反光偏蓝)，可能会多抓一些区域；
   第二版采用亮一次 RED，上层机台会抓到置具，OP的衣领...... （基本都是饱和度128的锅），一样会概率行多抓一些区域；
   第三版采用 （BLUE | GREEN） & RED 的算法来计算 ROI，设定相机饱和度为65.
   
4. 获取灯带ROI的颜色校验模块同单颗灯的颜色校验模块拆分开来

5. 关闭MineField模块

[v2.0.0.18] - 2021.08.12
1. 获取background 耗时82ms; 获取foreground 耗时176ms;可能的原因是A线程在几十毫秒前刚从相机里要完图，B线程后脚就过来再问相机要图，相机就索性给了同一张图。
   在亮灭灯后，delay 100ms, 然后再去抓 3 帧


[v2.0.1.2] - 2021.09.08
1. 核心功能：BGR颜色校验器 替换为 HSV颜色校验器，并分机种进行配置
2. 因为BGR颜色校验器在轻微反光，过曝情况下无法正常工作；且针对阈值的调整只能依据经验来设置，相比较而言，
   HSV颜色校验依据依据[link1](http://color.lukas-stratmann.com/color-systems/hsv.html) 进行可视化配置
   再依此[link2](https://blog.csdn.net/timidsmile/article/details/17297811) 对H 通道进行减半处理
3. 在main_test.cpp 模块将历史图像数据放进去，比较BGR && HSV 颜色校验器的校验效果


[v2.0.1.4] - 2021.09.09
1. GetVGAINFO 可以抓到1M room 的N卡 PPID 和 1M room 的A卡 PPID, 所以Aging.bat 中先用GetVGAINFO来抓 PPID 和ModelName，若均为空则认定是N卡， 用nvflash来抓 这个逻辑不正确
   有可能 GetVGAINFO 抓到 1M room 的N卡 PPID后，将N卡误认为是A卡， 但此时ModelName是空，会报1007错误
   所以将Aging.bat 逻辑反转一下， 先抓N卡， 再去抓A卡
2. 把出入日志的Time 列跟PPID 列调转一下，跟目录Time_PPID 格式保持一致 

[v2.0.1.5] - 2021.11.12
1.若测试pass，则不再保留过程image； 只在fail的时候保留
2.针对之前aging.csv一直无法记录1006错误的问题，对逻辑进行调整，程序启动后开启aging.csv， 处理完异常后， 再将异常信息一同写入aging.csv
3.新增 ERR_GPU_LOAD_FAILURE 异常， 用来细化处理 ERR_RUN_I2C_FAILURE

[v2.0.1.6] - 2021.11.22
1. 不保留测试过程图片开关开到配置档中
2. 调整Aging.csv 格式
3. 修改I2CWrap 中ERR_RUN_I2C_FAILURE 异常抛出时的条件开关错误
4. 缩减I2CWrap 中retry load GPU 的次数, 调整为5次

[v2.0.1.7] - 2021.11.24
1. 程式开启时删除ppid.txt, result.txt
2. 程式执行完毕后输出ppid.txt, result.txt

[v2.0.1.8] - 2021.12.07
1. 更新GetVGAINFO.exe 版本为1.0.0.5, 兼容RX6500XT的新GPU

[v2.0.1.9] - 2021.12.14
1. 针对[v2.0.1.6] 版本1号修改中, 直接关闭过程图片生成逻辑, 会导致遇到不良卡时, 因为没有过程图片的佐证.